<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.mapper.BoardMapper">

	<!-- 게시글의 개수를 반환하는 쿼리 -->
	<select id="getAllBoardCount" resultType="int">
		<choose>
			<when test="searchKeyword.equals('total')"> <!-- searchKeyword가 전체검색일 경우 -->
				<choose>
					<when test="searchWord.equals('')"> <!--  특정 키워드가 없을경우 (보통의 경우)  -->
						SELECT 
								COUNT(*) 
						FROM 
								BOARD
					</when>
					<otherwise>	<!-- 특정 키워드가 있을 경우 -->
						SELECT 
								COUNT(*) 
						FROM 
								BOARD
						WHERE
								SUBJECT LIKE CONCAT('%',#{searchWord},'%') OR 
								WRITER LIKE CONCAT('%',#{searchWord},'%')
					</otherwise>
				</choose>
			</when>
			<otherwise>	<!-- searchKeyword가 전체 검색이 아닐 경우 -->
				SELECT 
						COUNT(*) 
				FROM 
						BOARD 
				WHERE
					<if test="searchKeyword.equals('writer')">
						WRITER LIKE CONCAT('%' , #{searchWord} , '%')
					</if>
					<if test="searchKeyword.equals('subject')">
						SUBJECT LIKE CONCAT('%' , #{searchWord} , '%')
					</if>
			</otherwise>
		</choose>	
	</select>

	<!-- 게시글의 내용을 반환하는 쿼리 -->
	<select id="getSearchBoard" resultType="com.spring.boardEx02.dto.BoardDTO">
		<choose>
			<when test="searchKeyword.equals('total')">	<!-- 전체 검색일 경우 -->
				<choose>
					<when test="searchWord.equals('')">	<!-- 전체 검색중 검색 문자가 없을 경우 -->
						SELECT
								*
						FROM
								BOARD
						ORDER BY
								REF DESC,
								RE_STEP 
						LIMIT 
								#{startBoardIdx} , #{onePageViewCount}
					</when>
					<otherwise>	<!-- 전체 검색중 검색 문자가 있을 경우 -->
						SELECT 
								*
						FROM
								BOARD
						WHERE						
								SUBJECT LIKE CONCAT('%' , #{searchWord} , '%') OR
								WRITER LIKE CONCAT('%' , #{searchWord} , '%')
						ORDER BY
								REF DESC,
								RE_STEP  
						LIMIT 
								#{startBoardIdx},#{onePageViewCount}
					</otherwise>
				</choose>
			</when>
			<otherwise>	<!-- 서치 키워드를 이용하여 검색하는 경우 -->
				SELECT
						*
				FROM
						BOARD
				WHERE
					<if test="searchKeyword.equals('writer')">
						WRITER LIKE CONCAT('%' , #{searchWord} , '%')
					</if>
					<if test="searchKeyword.equals('subject')">
						SUBJECT LIKE CONCAT('%' , #{searchWord} , '%')
					</if>
				ORDER BY
						REF DESC,
						RE_STEP 
				LIMIT
						#{startBoardIdx} , #{onePageViewCount}
			</otherwise>
		</choose>
	</select>
	
	<!-- 게시글을 저장하는 쿼리 -->
	<insert id="insertBoard">
		INSERT INTO 
				BOARD 
		VALUES (
				(SELECT 
					IFNULL(MAX(NUM) + 1 , 1)<!-- null이아니면 max(num)+1, null이면 1을 셀렉트함 -->
				FROM 
					BOARD AS B), 
				#{writer}, 
				#{email}, 
				#{subject}, 
				#{password}, 
				now(),
				(SELECT 
					IFNULL(MAX(REF) + 1 , 1) 
				FROM 
					BOARD AS B),
				1, 
				1, 
				0, 
				#{content})
	</insert>

	<!-- 하나의 게시글을 반환하는 쿼리 -->
	<select id="getOneBoard" resultType="com.spring.boardEx02.dto.BoardDTO">
		SELECT
				*
		FROM
				BOARD
		WHERE
				NUM=#{num}
	</select>
 
 	<!-- 하나의 게시글을 수정하는 쿼리 -->
	<update id="updateBoard">
		UPDATE 
				BOARD 
		SET 
				SUBJECT=#{subject}, 
				CONTENT=#{content} 
		WHERE 
				NUM=#{num}
	</update>

	<!-- 스탭을 옮려주는 쿼리 -->
	<update id="updateBoardReplyStep">
		<![CDATA[
			UPDATE 
					BOARD 
			SET 
					RE_STEP = RE_STEP+1
			WHERE 
					REF = #{ref} AND RE_STEP > #{reStep} 
		]]>
	</update>
	
	<!-- 게시글을 삭제하는 쿼리 -->
	<delete id="deleteBoard">
		DELETE FROM 
				BOARD 
		WHERE 
				NUM=#{num}
	</delete>
	
	<!-- 게시글의 비밀번호를 검증하는 쿼리 -->
	<select id="validateUserCheck" resultType="com.spring.boardEx02.dto.BoardDTO">
		SELECT
				*
		FROM
				BOARD
		WHERE
				NUM=#{num} AND 
				PASSWORD=#{password} 
	</select>
	
	<!-- 게시글 조회시 조회수가 1증가하는 쿼리 -->
	<update id="increaseReadCount">
		UPDATE
				BOARD
		SET
				READ_COUNT = READ_COUNT +1
		WHERE
				NUM=#{num}
	</update>
	
	<!-- 댓글을 등록하는 쿼리 -->
	<insert id="insertReplyBoard">
		INSERT INTO 
				BOARD
		VALUES (
				(SELECT 
					MAX(NUM) + 1 
				FROM 
					BOARD AS B),
			    #{writer},
			    #{email},
			    #{subject},
			    #{password},
			    now(),
			    #{ref},
			    #{reStep} + 1,
			    #{reLevel} + 1,
			    0,
			    #{content})
	</insert>
	
	<!-- 페이징 테스트를 위한 더미데이터 생성 쿼리 -->
	<insert id="makeDummyData">
			INSERT INTO 
				BOARD 
			VALUES
			<foreach collection="list" item="bdto" separator=",">
					( #{bdto.num},
					#{bdto.writer}, 
					#{bdto.email}, 
					#{bdto.subject}, 
					#{bdto.password}, 
					now(), 
					#{bdto.ref}, 
					#{bdto.reStep}, 
					#{bdto.reLevel}, 
					#{bdto.readCount},
					#{bdto.content} )
			</foreach>
	</insert>
	
 </mapper>